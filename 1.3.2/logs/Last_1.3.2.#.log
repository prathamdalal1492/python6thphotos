# IPython log file

import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt
import matplotlib.pyplot as plt
a = np.random.randn(100000)
a = np.random.randn(100000)
plt.hist.randn(a)
a =np.random.randn(100000)
a = np.random.randn(10000)
import numpy as np
a = np.random.randn(10000)
plt.hist.randn(a)
plt.hist(a)
#[Out]# (array([    9.,    73.,   438.,  1272.,  2576.,  2790.,  1893.,   765.,
#[Out]#          162.,    22.]), array([-3.86536435, -3.12574873, -2.38613311, -1.64651748, -0.90690186,
#[Out]#        -0.16728623,  0.57232939,  1.31194501,  2.05156064,  2.79117626,
#[Out]#         3.53079189]), <a list of 10 Patch objects>)
plt.hist(a)
#[Out]# (array([    9.,    73.,   438.,  1272.,  2576.,  2790.,  1893.,   765.,
#[Out]#          162.,    22.]), array([-3.86536435, -3.12574873, -2.38613311, -1.64651748, -0.90690186,
#[Out]#        -0.16728623,  0.57232939,  1.31194501,  2.05156064,  2.79117626,
#[Out]#         3.53079189]), <a list of 10 Patch objects>)
plt.savefig('1.3.2/Histogram')
%logstart -ort 1.3.2/logs/Last_1.3.2.#.1
# Jane Doe 1.3.2 IPython log
The code above created a historgram for me. At first it did not work but after I saved it, the image poped up in my folder and I opened it.
# The code above created a historgram for me. At first it did not work but after I saved it, the image poped up in my folder and I opened it.
5 + 3
#[Out]# 8
7 * 2
#[Out]# 14
7* 2.0
#[Out]# 14.0
# It matters if you are using floats. When you use floats. Floats are the combination of ints and decimal points. When you multiply even 1 float you always get a decimal point. They matter more.
7/2
#[Out]# 3
7/2.
#[Out]# 3.5
# int divided by int gives you a whole number without a remiander. A whole number divided by a float gives you the answer with the remainder.
# 8 assignment
1.0 == 1
#[Out]# True
# Assignment 8
student_age=16
a
#[Out]# array([ 0.56868279,  1.00357808,  0.29139392, ...,  0.66969151,
#[Out]#         0.9375819 , -0.10418175])
23**43
#[Out]# 35834136918934220777541995677272642015423987712183913488967L
# The number i got for that math problem is 35834136918934220777541995677272642015423987712183913488967
%logstop
# Fri, 07 Dec 2018 21:55:32
 %run 1.3.2/Last_1.3.2.py
# Fri, 07 Dec 2018 21:56:03
# If you mess up the code is easy to delete 
# Fri, 07 Dec 2018 21:56:53
# In Scratch and App Inventor you had loops 
# Fri, 07 Dec 2018 21:58:15
# Doc strings are important because they help you define your function 
# Fri, 07 Dec 2018 21:59:21
# It will save memory for the rest of the program to run 
# Fri, 07 Dec 2018 22:01:46
# Compilers are the people who are actually talking 
# Fri, 07 Dec 2018 22:02:10
add_tip(3,2)
# Fri, 07 Dec 2018 22:02:28
add_tio
# Fri, 07 Dec 2018 22:02:42
add_tip(3.00,0.15)
# Fri, 07 Dec 2018 22:04:29
add_tip(15.00,12)
# Fri, 07 Dec 2018 22:04:45
add_tip(5,0.5)
# Fri, 07 Dec 2018 22:05:10
 %run 1.3.2/Last_1.3.2.py
# Fri, 07 Dec 2018 22:05:15
add_tip(5,0.5)
#[Out]# 7.5
# Fri, 07 Dec 2018 22:08:58
 %run 1.3.2/Last_1.3.2.py
# Fri, 07 Dec 2018 22:09:11
hyp(5,12)
#[Out]# 4.123105625617661
# Fri, 07 Dec 2018 22:10:11
 %run 1.3.2/Last_1.3.2.py
# Fri, 07 Dec 2018 22:10:16
hyp(5,12)
#[Out]# 13.0
# Fri, 07 Dec 2018 22:16:54
 %run 1.3.2/Last_1.3.2.py
# Fri, 07 Dec 2018 22:17:03
meanie(1,7,1)
#[Out]# 3.0
# Fri, 07 Dec 2018 22:25:35
 %run 1.3.2/Last_1.3.2.py
# Fri, 07 Dec 2018 22:26:12
perimeter(12, 16) 
#[Out]# 56
# Fri, 07 Dec 2018 22:30:03
%logstop 
